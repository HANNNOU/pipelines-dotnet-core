# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Vs2017-win2016'

variables:
  buildConfiguration: 'Release'

steps:
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'
  - task: UseDotNet@2 
  inputs: version: '3.0.x'
  - task: UseDotNet@2 
  inputs: version: '2.2.x' 
  packageType: runtime
 - task: DotNetCoreCLI@2 
   inputs: command: restore 
   projects: '**/*.csproj' 
   feedsToUse: config
   nugetConfigPath: NuGet.config
   externalFeedCredentials: <Name of the NuGet service connection>
- task: DotNetCoreCLI@2 
   displayName: Build
   inputs: 
     command: build 
     projects: '**/*.csproj' 
     arguments: '--configuration Release' # modifier selon vos besoins
- task: DotNetCoreCLI@2 
  displayName: 'Install dotnetsay' 
  inputs:
  command: custom 
   custom: tool 
   arguments: 'install -g dotnetsay'
- task: DotNetCoreCLI@2
  displayName: 'Install dotnetsay' 
  inputs: 
   command: test 
   projects: '**/*Tests/*.csproj' 
   arguments: '--configuration $(buildConfiguration)'

- script: dotnettest <test-project> --logger trx 
- task: PublishTestResults@2 
  condition: succeededOrFailed() 
inputs: 
 testRunner: 
VSTest testResultsFiles: '**/*.trx'
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*.csproj'
    arguments: '''--configuration $(buildConfiguration) --collect "Code coverage"'''
    
- script: dotnet test <test-project> --logger trx --collect "Code coverage" 
- task: PublishTestResults@2 
  inputs: 
   testRunner: VSTest
   testResultsFiles: '**/*.trx'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '''--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'''
    